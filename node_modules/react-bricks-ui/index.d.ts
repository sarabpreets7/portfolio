import { UseFormRegister, FieldErrorsImpl } from 'react-hook-form';
import { types } from 'react-bricks/frontend';
import * as react_bricks from 'react-bricks';
import * as blog_Video_Video from 'blog/Video/Video';

interface TweetLightProps {
    tweetLink: string;
    authorLink: string;
}

interface TweetProps {
    id: string;
    placeholder: string;
    align: string;
    cards: string;
    conversation: string;
    theme: string;
}

interface CodeBrickProps {
    language: string;
    dataline?: string;
    showLineNumbers: boolean;
}

interface TitleProps {
    size?: 'medium' | 'large';
}

interface TableCellProps {
    isHeader: boolean;
}

interface TableRowProps {
    index: number;
}

interface FormTextareaProps {
    register: UseFormRegister<any>;
    isRequired: boolean;
    fieldName?: string;
    label: string;
    key: string;
    errors: FieldErrorsImpl<{
        [x: string]: any;
    }>;
    requiredError?: string;
    columns: 'one' | 'two';
}

interface FormSingleRadioProps {
    register: UseFormRegister<any>;
    fieldName?: string;
    label: string;
    value: string;
    isRequired: boolean;
    key: string;
}

interface FormRadiobuttonsProps {
    register?: UseFormRegister<any>;
    fieldName?: string;
    fieldLabel?: string;
    isRequired: boolean;
    columns: 'one' | 'two';
}

interface FormSelectProps {
    register: UseFormRegister<any>;
    fieldName?: string;
    label: string;
    values?: string;
    isRequired: boolean;
    key: string;
    errors: FieldErrorsImpl<{
        [x: string]: any;
    }>;
    requiredError?: string;
    columns: 'one' | 'two';
}

interface FormInputProps {
    register: UseFormRegister<any>;
    errors: FieldErrorsImpl<{
        [x: string]: any;
    }>;
    fieldName?: string;
    label?: string;
    isRequired: boolean;
    inputType: 'text' | 'number' | 'date';
    key: string;
    pattern?: string;
    patternError?: string;
    requiredError?: string;
    columns: 'one' | 'two';
}

interface FormCheckboxProps {
    register: UseFormRegister<any>;
    fieldName: string;
    label: string;
    isRequired: boolean;
    key: string;
    errors: FieldErrorsImpl<{
        [x: string]: any;
    }>;
    requiredError?: string;
    columns: 'one' | 'two';
}

interface FormButtonProps {
    type: 'submit' | 'reset';
    color?: {
        color: string;
        className: string;
    };
}

interface FormBuilderProps {
    bg?: {
        color: string;
        className: string;
    };
}

interface SpacerProps {
    range: number;
    bg?: {
        color: string;
        className: string;
    };
}

interface VideoProps {
    url: string;
    platform: string;
}

declare type layoutType = 'base' | 'small' | 'small-3cols';
interface FeatureItemProps {
    screenLayout: layoutType;
    isTextCenter: boolean;
}

interface FeaturesProps {
    bg?: {
        color: string;
        className: string;
    };
    screenLayout: layoutType;
}

interface TeamItemProps {
    twitter?: string;
    github?: string;
    linkedin?: string;
}

declare enum NewsletterProvider {
    MailChimp = "MAILCHIMP",
    ConvertKit = "CONVERTKIT"
}
interface NewsletterSubscribeProps {
    centered?: boolean;
    provider: NewsletterProvider;
    mailchimpUrl: string;
    buttonText: string;
    resultOkText: string;
}

declare type Size = 'lg' | 'md' | 'sm' | 'full';

interface MapProps {
    bg?: {
        color: string;
        className: string;
    };
    size?: 'medium' | 'large';
    width?: Size;
    zoom: string;
    lat: string;
    lng: string;
}

interface FaqProps {
    bg?: {
        color: string;
        className: string;
    };
    width?: Size;
}

interface CustomerProps {
    grayscale?: boolean;
}

declare type Border = 'none' | 'full' | 'boxed';

interface CustomersProps {
    bg?: {
        color: string;
        className: string;
    };
    borderTop?: Border;
    borderBottom?: Border;
    size?: 'medium' | 'large';
    width?: Size;
    grayscale?: boolean;
}

interface TestimonialProps {
    authorName: string;
    authorJobTitle: string;
    avatarImage: types.IImageSource;
    logoImage: types.IImageSource;
    small?: boolean;
    bg?: {
        color: string;
        className: string;
    };
}

interface TextImageProps {
    bg?: {
        color: string;
        className: string;
    };
    width?: Size;
    heroTitle?: boolean;
    mobileTextCenter?: boolean;
    multiple?: boolean;
    imageSide?: 'left' | 'right';
    mobileImageTop?: boolean;
    mobileIcon?: boolean;
    hasShadow?: boolean;
    isRounded?: boolean;
    bulletsVariant?: {
        color: string;
        className: string;
    };
}

declare type GradientName = 'none' | 'ocean' | 'violet' | 'sun';

interface HeroUnitProps {
    bg?: {
        color: string;
        className: string;
    };
    size?: 'medium' | 'large';
    textGradient?: GradientName;
}

interface BulletListItemProps {
    color: {
        color: string;
        className: string;
        className2: string;
    };
    className: string;
    attributes: string;
}

interface ButtonProps {
    text: string;
    href: string;
    isTargetBlank: boolean;
    isBigButton: boolean;
    variant?: 'pink' | 'sky';
    type?: 'solid' | 'outline';
    padding: 'normal' | 'small';
    className?: string;
}

interface BadgeProps {
    color?: {
        color: string;
        className: string;
    };
    className?: string;
}

declare const allBricks$2: (react_bricks.types.Brick<BadgeProps> | react_bricks.types.Brick<ButtonProps> | react_bricks.types.Brick<BulletListItemProps> | react_bricks.types.Brick<HeroUnitProps> | react_bricks.types.Brick<TextImageProps> | react_bricks.types.Brick<{}> | react_bricks.types.Brick<TestimonialProps> | react_bricks.types.Brick<CustomersProps> | react_bricks.types.Brick<CustomerProps> | react_bricks.types.Brick<FaqProps> | react_bricks.types.Brick<MapProps> | react_bricks.types.Brick<NewsletterSubscribeProps> | react_bricks.types.Brick<TeamItemProps> | react_bricks.types.Brick<FeaturesProps> | react_bricks.types.Brick<FeatureItemProps> | react_bricks.types.Brick<blog_Video_Video.VideoProps> | react_bricks.types.Brick<SpacerProps> | react_bricks.types.Brick<FormBuilderProps> | react_bricks.types.Brick<FormButtonProps> | react_bricks.types.Brick<FormCheckboxProps> | react_bricks.types.Brick<FormInputProps> | react_bricks.types.Brick<FormSelectProps> | react_bricks.types.Brick<FormRadiobuttonsProps> | react_bricks.types.Brick<FormSingleRadioProps> | react_bricks.types.Brick<FormTextareaProps> | react_bricks.types.Brick<TableRowProps> | react_bricks.types.Brick<TableCellProps>)[];

declare const allBricks$1: (react_bricks.types.Brick<{}> | react_bricks.types.Brick<VideoProps> | react_bricks.types.Brick<TitleProps> | react_bricks.types.Brick<CodeBrickProps> | react_bricks.types.Brick<TweetProps> | react_bricks.types.Brick<TweetLightProps>)[];

declare const allBricks: (react_bricks.types.Brick<BadgeProps> | react_bricks.types.Brick<ButtonProps> | react_bricks.types.Brick<BulletListItemProps> | react_bricks.types.Brick<HeroUnitProps> | react_bricks.types.Brick<TextImageProps> | react_bricks.types.Brick<{}> | react_bricks.types.Brick<TestimonialProps> | react_bricks.types.Brick<CustomersProps> | react_bricks.types.Brick<CustomerProps> | react_bricks.types.Brick<FaqProps> | react_bricks.types.Brick<MapProps> | react_bricks.types.Brick<NewsletterSubscribeProps> | react_bricks.types.Brick<TeamItemProps> | react_bricks.types.Brick<FeaturesProps> | react_bricks.types.Brick<FeatureItemProps> | react_bricks.types.Brick<VideoProps> | react_bricks.types.Brick<SpacerProps> | react_bricks.types.Brick<FormBuilderProps> | react_bricks.types.Brick<FormButtonProps> | react_bricks.types.Brick<FormCheckboxProps> | react_bricks.types.Brick<FormInputProps> | react_bricks.types.Brick<FormSelectProps> | react_bricks.types.Brick<FormRadiobuttonsProps> | react_bricks.types.Brick<FormSingleRadioProps> | react_bricks.types.Brick<FormTextareaProps> | react_bricks.types.Brick<TableRowProps> | react_bricks.types.Brick<TableCellProps> | react_bricks.types.Brick<TitleProps> | react_bricks.types.Brick<CodeBrickProps> | react_bricks.types.Brick<TweetProps> | react_bricks.types.Brick<TweetLightProps>)[];

export { allBricks$1 as blog, allBricks as default, allBricks$2 as website };
