import { types } from 'react-bricks/frontend';
import { UseFormRegister, FieldErrorsImpl } from 'react-hook-form';
import * as blog_Video_Video from 'blog/Video/Video';
export { default as Video } from 'blog/Video/Video';
import * as react_bricks from 'react-bricks';
import { Size as Size$1 } from 'website/layout/Container';

interface TableCellProps {
    isHeader: boolean;
}
declare const TableCell: types.Brick<TableCellProps>;

interface TableRowProps {
    index: number;
}
declare const TableRow: types.Brick<TableRowProps>;

interface FormTextareaProps {
    register: UseFormRegister<any>;
    isRequired: boolean;
    fieldName?: string;
    label: string;
    key: string;
    errors: FieldErrorsImpl<{
        [x: string]: any;
    }>;
    requiredError?: string;
    columns: 'one' | 'two';
}
declare const FormTextarea: types.Brick<FormTextareaProps>;

interface FormSingleRadioProps {
    register: UseFormRegister<any>;
    fieldName?: string;
    label: string;
    value: string;
    isRequired: boolean;
    key: string;
}
declare const FormSingleRadio: types.Brick<FormSingleRadioProps>;

interface FormRadiobuttonsProps {
    register?: UseFormRegister<any>;
    fieldName?: string;
    fieldLabel?: string;
    isRequired: boolean;
    columns: 'one' | 'two';
}
declare const FormRadiobuttons: types.Brick<FormRadiobuttonsProps>;

interface FormSelectProps {
    register: UseFormRegister<any>;
    fieldName?: string;
    label: string;
    values?: string;
    isRequired: boolean;
    key: string;
    errors: FieldErrorsImpl<{
        [x: string]: any;
    }>;
    requiredError?: string;
    columns: 'one' | 'two';
}
declare const FormSelect: types.Brick<FormSelectProps>;

interface FormInputProps {
    register: UseFormRegister<any>;
    errors: FieldErrorsImpl<{
        [x: string]: any;
    }>;
    fieldName?: string;
    label?: string;
    isRequired: boolean;
    inputType: 'text' | 'number' | 'date';
    key: string;
    pattern?: string;
    patternError?: string;
    requiredError?: string;
    columns: 'one' | 'two';
}
declare const FormInput: types.Brick<FormInputProps>;

interface FormCheckboxProps {
    register: UseFormRegister<any>;
    fieldName: string;
    label: string;
    isRequired: boolean;
    key: string;
    errors: FieldErrorsImpl<{
        [x: string]: any;
    }>;
    requiredError?: string;
    columns: 'one' | 'two';
}
declare const FormCheckbox: types.Brick<FormCheckboxProps>;

interface FormButtonProps {
    type: 'submit' | 'reset';
    color?: {
        color: string;
        className: string;
    };
}
declare const FormButton: types.Brick<FormButtonProps>;

interface FormBuilderProps {
    bg?: {
        color: string;
        className: string;
    };
}
declare const FormBuilder: types.Brick<FormBuilderProps>;

interface SpacerProps {
    range: number;
    bg?: {
        color: string;
        className: string;
    };
}
declare const Spacer: types.Brick<SpacerProps>;

declare type layoutType = 'base' | 'small' | 'small-3cols';
interface FeatureItemProps {
    screenLayout: layoutType;
    isTextCenter: boolean;
}
declare const FeatureItem: types.Brick<FeatureItemProps>;

interface FeaturesProps {
    bg?: {
        color: string;
        className: string;
    };
    screenLayout: layoutType;
}
declare const Features: types.Brick<FeaturesProps>;

interface TeamItemProps {
    twitter?: string;
    github?: string;
    linkedin?: string;
}
declare const TeamItem: types.Brick<TeamItemProps>;

declare enum NewsletterProvider {
    MailChimp = "MAILCHIMP",
    ConvertKit = "CONVERTKIT"
}
interface NewsletterSubscribeProps {
    centered?: boolean;
    provider: NewsletterProvider;
    mailchimpUrl: string;
    buttonText: string;
    resultOkText: string;
}
declare const NewsletterSubscribe: types.Brick<NewsletterSubscribeProps>;

declare type Size = 'lg' | 'md' | 'sm' | 'full';

interface MapProps {
    bg?: {
        color: string;
        className: string;
    };
    size?: 'medium' | 'large';
    width?: Size;
    zoom: string;
    lat: string;
    lng: string;
}
declare const MapBrick: types.Brick<MapProps>;

interface FaqProps {
    bg?: {
        color: string;
        className: string;
    };
    width?: Size;
}
declare const Faq: types.Brick<FaqProps>;

interface CustomerProps {
    grayscale?: boolean;
}
declare const Customer: types.Brick<CustomerProps>;

declare type Border = 'none' | 'full' | 'boxed';

interface CustomersProps {
    bg?: {
        color: string;
        className: string;
    };
    borderTop?: Border;
    borderBottom?: Border;
    size?: 'medium' | 'large';
    width?: Size;
    grayscale?: boolean;
}
declare const Customers: types.Brick<CustomersProps>;

interface TestimonialProps {
    authorName: string;
    authorJobTitle: string;
    avatarImage: types.IImageSource;
    logoImage: types.IImageSource;
    small?: boolean;
    bg?: {
        color: string;
        className: string;
    };
}
declare const Testimonial: types.Brick<TestimonialProps>;

interface TextImageProps {
    bg?: {
        color: string;
        className: string;
    };
    width?: Size;
    heroTitle?: boolean;
    mobileTextCenter?: boolean;
    multiple?: boolean;
    imageSide?: 'left' | 'right';
    mobileImageTop?: boolean;
    mobileIcon?: boolean;
    hasShadow?: boolean;
    isRounded?: boolean;
    bulletsVariant?: {
        color: string;
        className: string;
    };
}
declare const TextImage: types.Brick<TextImageProps>;

declare type GradientName = 'none' | 'ocean' | 'violet' | 'sun';

interface HeroUnitProps {
    bg?: {
        color: string;
        className: string;
    };
    size?: 'medium' | 'large';
    textGradient?: GradientName;
}
declare const HeroUnit: types.Brick<HeroUnitProps>;

interface BulletListItemProps {
    color: {
        color: string;
        className: string;
        className2: string;
    };
    className: string;
    attributes: string;
}
declare const BulletListItem: types.Brick<BulletListItemProps>;

interface ButtonProps {
    text: string;
    href: string;
    isTargetBlank: boolean;
    isBigButton: boolean;
    variant?: 'pink' | 'sky';
    type?: 'solid' | 'outline';
    padding: 'normal' | 'small';
    className?: string;
}
declare const Button: types.Brick<ButtonProps>;

interface BadgeProps {
    color?: {
        color: string;
        className: string;
    };
    className?: string;
}
declare const Badge: types.Brick<BadgeProps>;

interface FeatureCalloutProps {
    bg?: {
        color: string;
        className: string;
    };
    width?: Size;
}
declare const FeatureCallout: types.Brick<FeatureCalloutProps>;

interface CallToActionProps {
    bg?: {
        color: string;
        className: string;
    };
    width?: Size;
}
declare const CallToAction: types.Brick<CallToActionProps>;

declare const FaqQuestion: types.Brick;

interface TeamProps {
    bg?: {
        color: string;
        className: string;
    };
    width?: Size;
}
declare const Team: types.Brick<TeamProps>;

declare const TextImageLogo: types.Brick;

interface ImageCarouselProps {
    bg?: {
        color: string;
        className: string;
    };
    width?: Size$1;
}
declare const ImageCarousel: types.Brick<ImageCarouselProps>;

interface Props {
}
declare const SingleImage: types.Brick<Props>;

interface HorizontalRuleProps {
    width?: Size$1;
    bg?: {
        color: string;
        className: string;
    };
}
declare const HorizontalRule: types.Brick<HorizontalRuleProps>;

interface TableProps {
    bg?: {
        color: string;
        className: string;
    };
}
declare const Table: types.Brick<TableProps>;

declare const allBricks: (react_bricks.types.Brick<BadgeProps> | react_bricks.types.Brick<ButtonProps> | react_bricks.types.Brick<BulletListItemProps> | react_bricks.types.Brick<HeroUnitProps> | react_bricks.types.Brick<TextImageProps> | react_bricks.types.Brick<{}> | react_bricks.types.Brick<TestimonialProps> | react_bricks.types.Brick<CustomersProps> | react_bricks.types.Brick<CustomerProps> | react_bricks.types.Brick<FaqProps> | react_bricks.types.Brick<MapProps> | react_bricks.types.Brick<NewsletterSubscribeProps> | react_bricks.types.Brick<TeamItemProps> | react_bricks.types.Brick<FeaturesProps> | react_bricks.types.Brick<FeatureItemProps> | react_bricks.types.Brick<blog_Video_Video.VideoProps> | react_bricks.types.Brick<SpacerProps> | react_bricks.types.Brick<FormBuilderProps> | react_bricks.types.Brick<FormButtonProps> | react_bricks.types.Brick<FormCheckboxProps> | react_bricks.types.Brick<FormInputProps> | react_bricks.types.Brick<FormSelectProps> | react_bricks.types.Brick<FormRadiobuttonsProps> | react_bricks.types.Brick<FormSingleRadioProps> | react_bricks.types.Brick<FormTextareaProps> | react_bricks.types.Brick<TableRowProps> | react_bricks.types.Brick<TableCellProps>)[];

export { Badge, FeatureCallout as BigFeature, BulletListItem, Button, CallToAction, Customer, Customers, FaqQuestion as Faq, Faq as Faqs, FeatureItem, Features, FormBuilder, FormButton, FormCheckbox, FormInput, FormRadiobuttons, FormSelect, FormSingleRadio, FormTextarea, HeroUnit, HorizontalRule, ImageCarousel, MapBrick as Map, NewsletterSubscribe, SingleImage, Spacer, Table, TableCell, TableRow, Team, TeamItem, Testimonial, TextImage, TextImageLogo, allBricks as default };
